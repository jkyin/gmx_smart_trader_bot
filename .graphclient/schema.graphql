schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Claim {
  id: ID!
  receiver: String!
  amount: BigInt!
  amountUsd: BigInt!
}

input Claim_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  receiver: String
  receiver_not: String
  receiver_gt: String
  receiver_lt: String
  receiver_gte: String
  receiver_lte: String
  receiver_in: [String!]
  receiver_not_in: [String!]
  receiver_contains: String
  receiver_contains_nocase: String
  receiver_not_contains: String
  receiver_not_contains_nocase: String
  receiver_starts_with: String
  receiver_starts_with_nocase: String
  receiver_not_starts_with: String
  receiver_not_starts_with_nocase: String
  receiver_ends_with: String
  receiver_ends_with_nocase: String
  receiver_not_ends_with: String
  receiver_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigInt
  amountUsd_not: BigInt
  amountUsd_gt: BigInt
  amountUsd_lt: BigInt
  amountUsd_gte: BigInt
  amountUsd_lte: BigInt
  amountUsd_in: [BigInt!]
  amountUsd_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Claim_filter]
  or: [Claim_filter]
}

enum Claim_orderBy {
  id
  receiver
  amount
  amountUsd
}

type ClosePosition {
  id: ID!
  timestamp: Int!
  key: String!
  size: BigInt!
  collateral: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
}

input ClosePosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  reserveAmount: BigInt
  reserveAmount_not: BigInt
  reserveAmount_gt: BigInt
  reserveAmount_lt: BigInt
  reserveAmount_gte: BigInt
  reserveAmount_lte: BigInt
  reserveAmount_in: [BigInt!]
  reserveAmount_not_in: [BigInt!]
  realisedPnl: BigInt
  realisedPnl_not: BigInt
  realisedPnl_gt: BigInt
  realisedPnl_lt: BigInt
  realisedPnl_gte: BigInt
  realisedPnl_lte: BigInt
  realisedPnl_in: [BigInt!]
  realisedPnl_not_in: [BigInt!]
  averagePrice: BigInt
  averagePrice_not: BigInt
  averagePrice_gt: BigInt
  averagePrice_lt: BigInt
  averagePrice_gte: BigInt
  averagePrice_lte: BigInt
  averagePrice_in: [BigInt!]
  averagePrice_not_in: [BigInt!]
  entryFundingRate: BigInt
  entryFundingRate_not: BigInt
  entryFundingRate_gt: BigInt
  entryFundingRate_lt: BigInt
  entryFundingRate_gte: BigInt
  entryFundingRate_lte: BigInt
  entryFundingRate_in: [BigInt!]
  entryFundingRate_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClosePosition_filter]
  or: [ClosePosition_filter]
}

enum ClosePosition_orderBy {
  id
  timestamp
  key
  size
  collateral
  reserveAmount
  realisedPnl
  averagePrice
  entryFundingRate
}

type DecreasePosition {
  id: ID!
  timestamp: Int!
  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!
  collateralDelta: BigInt!
  sizeDelta: BigInt!
  price: BigInt!
  fee: BigInt!
}

input DecreasePosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  indexToken: String
  indexToken_not: String
  indexToken_gt: String
  indexToken_lt: String
  indexToken_gte: String
  indexToken_lte: String
  indexToken_in: [String!]
  indexToken_not_in: [String!]
  indexToken_contains: String
  indexToken_contains_nocase: String
  indexToken_not_contains: String
  indexToken_not_contains_nocase: String
  indexToken_starts_with: String
  indexToken_starts_with_nocase: String
  indexToken_not_starts_with: String
  indexToken_not_starts_with_nocase: String
  indexToken_ends_with: String
  indexToken_ends_with_nocase: String
  indexToken_not_ends_with: String
  indexToken_not_ends_with_nocase: String
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  collateralDelta: BigInt
  collateralDelta_not: BigInt
  collateralDelta_gt: BigInt
  collateralDelta_lt: BigInt
  collateralDelta_gte: BigInt
  collateralDelta_lte: BigInt
  collateralDelta_in: [BigInt!]
  collateralDelta_not_in: [BigInt!]
  sizeDelta: BigInt
  sizeDelta_not: BigInt
  sizeDelta_gt: BigInt
  sizeDelta_lt: BigInt
  sizeDelta_gte: BigInt
  sizeDelta_lte: BigInt
  sizeDelta_in: [BigInt!]
  sizeDelta_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DecreasePosition_filter]
  or: [DecreasePosition_filter]
}

enum DecreasePosition_orderBy {
  id
  timestamp
  account
  collateralToken
  indexToken
  isLong
  key
  collateralDelta
  sizeDelta
  price
  fee
}

type IncreasePosition {
  id: ID!
  timestamp: Int!
  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!
  collateralDelta: BigInt!
  sizeDelta: BigInt!
  price: BigInt!
  fee: BigInt!
}

input IncreasePosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  indexToken: String
  indexToken_not: String
  indexToken_gt: String
  indexToken_lt: String
  indexToken_gte: String
  indexToken_lte: String
  indexToken_in: [String!]
  indexToken_not_in: [String!]
  indexToken_contains: String
  indexToken_contains_nocase: String
  indexToken_not_contains: String
  indexToken_not_contains_nocase: String
  indexToken_starts_with: String
  indexToken_starts_with_nocase: String
  indexToken_not_starts_with: String
  indexToken_not_starts_with_nocase: String
  indexToken_ends_with: String
  indexToken_ends_with_nocase: String
  indexToken_not_ends_with: String
  indexToken_not_ends_with_nocase: String
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  collateralDelta: BigInt
  collateralDelta_not: BigInt
  collateralDelta_gt: BigInt
  collateralDelta_lt: BigInt
  collateralDelta_gte: BigInt
  collateralDelta_lte: BigInt
  collateralDelta_in: [BigInt!]
  collateralDelta_not_in: [BigInt!]
  sizeDelta: BigInt
  sizeDelta_not: BigInt
  sizeDelta_gt: BigInt
  sizeDelta_lt: BigInt
  sizeDelta_gte: BigInt
  sizeDelta_lte: BigInt
  sizeDelta_in: [BigInt!]
  sizeDelta_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IncreasePosition_filter]
  or: [IncreasePosition_filter]
}

enum IncreasePosition_orderBy {
  id
  timestamp
  account
  collateralToken
  indexToken
  isLong
  key
  collateralDelta
  sizeDelta
  price
  fee
}

enum IntervalTime {
  _300
  _900
  _3600
  _14400
  _86400
  _604800
}

type LiquidatePosition {
  id: ID!
  timestamp: Int!
  key: String!
  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  size: BigInt!
  collateral: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!
  markPrice: BigInt!
}

input LiquidatePosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  indexToken: String
  indexToken_not: String
  indexToken_gt: String
  indexToken_lt: String
  indexToken_gte: String
  indexToken_lte: String
  indexToken_in: [String!]
  indexToken_not_in: [String!]
  indexToken_contains: String
  indexToken_contains_nocase: String
  indexToken_not_contains: String
  indexToken_not_contains_nocase: String
  indexToken_starts_with: String
  indexToken_starts_with_nocase: String
  indexToken_not_starts_with: String
  indexToken_not_starts_with_nocase: String
  indexToken_ends_with: String
  indexToken_ends_with_nocase: String
  indexToken_not_ends_with: String
  indexToken_not_ends_with_nocase: String
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  reserveAmount: BigInt
  reserveAmount_not: BigInt
  reserveAmount_gt: BigInt
  reserveAmount_lt: BigInt
  reserveAmount_gte: BigInt
  reserveAmount_lte: BigInt
  reserveAmount_in: [BigInt!]
  reserveAmount_not_in: [BigInt!]
  realisedPnl: BigInt
  realisedPnl_not: BigInt
  realisedPnl_gt: BigInt
  realisedPnl_lt: BigInt
  realisedPnl_gte: BigInt
  realisedPnl_lte: BigInt
  realisedPnl_in: [BigInt!]
  realisedPnl_not_in: [BigInt!]
  markPrice: BigInt
  markPrice_not: BigInt
  markPrice_gt: BigInt
  markPrice_lt: BigInt
  markPrice_gte: BigInt
  markPrice_lte: BigInt
  markPrice_in: [BigInt!]
  markPrice_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidatePosition_filter]
  or: [LiquidatePosition_filter]
}

enum LiquidatePosition_orderBy {
  id
  timestamp
  key
  account
  collateralToken
  indexToken
  isLong
  size
  collateral
  reserveAmount
  realisedPnl
  markPrice
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PriceLatest {
  id: ID!
  value: BigInt!
  timestamp: Int!
}

input PriceLatest_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PriceLatest_filter]
  or: [PriceLatest_filter]
}

enum PriceLatest_orderBy {
  id
  value
  timestamp
}

type Pricefeed {
  id: ID!
  timestamp: Int!
  o: BigInt!
  h: BigInt!
  l: BigInt!
  c: BigInt!
  tokenAddress: TokenAddress!
  interval: IntervalTime!
}

input Pricefeed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  o: BigInt
  o_not: BigInt
  o_gt: BigInt
  o_lt: BigInt
  o_gte: BigInt
  o_lte: BigInt
  o_in: [BigInt!]
  o_not_in: [BigInt!]
  h: BigInt
  h_not: BigInt
  h_gt: BigInt
  h_lt: BigInt
  h_gte: BigInt
  h_lte: BigInt
  h_in: [BigInt!]
  h_not_in: [BigInt!]
  l: BigInt
  l_not: BigInt
  l_gt: BigInt
  l_lt: BigInt
  l_gte: BigInt
  l_lte: BigInt
  l_in: [BigInt!]
  l_not_in: [BigInt!]
  c: BigInt
  c_not: BigInt
  c_gt: BigInt
  c_lt: BigInt
  c_gte: BigInt
  c_lte: BigInt
  c_in: [BigInt!]
  c_not_in: [BigInt!]
  tokenAddress: TokenAddress
  tokenAddress_not: TokenAddress
  tokenAddress_in: [TokenAddress!]
  tokenAddress_not_in: [TokenAddress!]
  interval: IntervalTime
  interval_not: IntervalTime
  interval_in: [IntervalTime!]
  interval_not_in: [IntervalTime!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pricefeed_filter]
  or: [Pricefeed_filter]
}

enum Pricefeed_orderBy {
  id
  timestamp
  o
  h
  l
  c
  tokenAddress
  interval
}

type Query {
  pricefeed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pricefeed
  pricefeeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Pricefeed_orderBy
    orderDirection: OrderDirection
    where: Pricefeed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pricefeed!]!
  priceLatest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceLatest
  priceLatests(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceLatest_orderBy
    orderDirection: OrderDirection
    where: PriceLatest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceLatest!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  increasePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IncreasePosition
  increasePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: IncreasePosition_orderBy
    orderDirection: OrderDirection
    where: IncreasePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IncreasePosition!]!
  decreasePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DecreasePosition
  decreasePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: DecreasePosition_orderBy
    orderDirection: OrderDirection
    where: DecreasePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DecreasePosition!]!
  updatePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdatePosition
  updatePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdatePosition_orderBy
    orderDirection: OrderDirection
    where: UpdatePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdatePosition!]!
  referralAdjustment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReferralAdjustment
  referralAdjustments(
    skip: Int = 0
    first: Int = 100
    orderBy: ReferralAdjustment_orderBy
    orderDirection: OrderDirection
    where: ReferralAdjustment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReferralAdjustment!]!
  closePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClosePosition
  closePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClosePosition_orderBy
    orderDirection: OrderDirection
    where: ClosePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClosePosition!]!
  liquidatePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidatePosition
  liquidatePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidatePosition_orderBy
    orderDirection: OrderDirection
    where: LiquidatePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidatePosition!]!
  trade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trades(
    skip: Int = 0
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    where: Trade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trade!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type ReferralAdjustment {
  id: ID!
  timestamp: Int!
  account: String!
  sizeDelta: BigInt!
  marginFeeBasisPoints: BigInt!
  referralCode: String!
  referrer: String!
}

input ReferralAdjustment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  sizeDelta: BigInt
  sizeDelta_not: BigInt
  sizeDelta_gt: BigInt
  sizeDelta_lt: BigInt
  sizeDelta_gte: BigInt
  sizeDelta_lte: BigInt
  sizeDelta_in: [BigInt!]
  sizeDelta_not_in: [BigInt!]
  marginFeeBasisPoints: BigInt
  marginFeeBasisPoints_not: BigInt
  marginFeeBasisPoints_gt: BigInt
  marginFeeBasisPoints_lt: BigInt
  marginFeeBasisPoints_gte: BigInt
  marginFeeBasisPoints_lte: BigInt
  marginFeeBasisPoints_in: [BigInt!]
  marginFeeBasisPoints_not_in: [BigInt!]
  referralCode: String
  referralCode_not: String
  referralCode_gt: String
  referralCode_lt: String
  referralCode_gte: String
  referralCode_lte: String
  referralCode_in: [String!]
  referralCode_not_in: [String!]
  referralCode_contains: String
  referralCode_contains_nocase: String
  referralCode_not_contains: String
  referralCode_not_contains_nocase: String
  referralCode_starts_with: String
  referralCode_starts_with_nocase: String
  referralCode_not_starts_with: String
  referralCode_not_starts_with_nocase: String
  referralCode_ends_with: String
  referralCode_ends_with_nocase: String
  referralCode_not_ends_with: String
  referralCode_not_ends_with_nocase: String
  referrer: String
  referrer_not: String
  referrer_gt: String
  referrer_lt: String
  referrer_gte: String
  referrer_lte: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_contains: String
  referrer_contains_nocase: String
  referrer_not_contains: String
  referrer_not_contains_nocase: String
  referrer_starts_with: String
  referrer_starts_with_nocase: String
  referrer_not_starts_with: String
  referrer_not_starts_with_nocase: String
  referrer_ends_with: String
  referrer_ends_with_nocase: String
  referrer_not_ends_with: String
  referrer_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ReferralAdjustment_filter]
  or: [ReferralAdjustment_filter]
}

enum ReferralAdjustment_orderBy {
  id
  timestamp
  account
  sizeDelta
  marginFeeBasisPoints
  referralCode
  referrer
}

enum Status {
  open
  closed
  liquidated
}

type Subscription {
  pricefeed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pricefeed
  pricefeeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Pricefeed_orderBy
    orderDirection: OrderDirection
    where: Pricefeed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pricefeed!]!
  priceLatest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceLatest
  priceLatests(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceLatest_orderBy
    orderDirection: OrderDirection
    where: PriceLatest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceLatest!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    where: Transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transfer!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  increasePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IncreasePosition
  increasePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: IncreasePosition_orderBy
    orderDirection: OrderDirection
    where: IncreasePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IncreasePosition!]!
  decreasePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DecreasePosition
  decreasePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: DecreasePosition_orderBy
    orderDirection: OrderDirection
    where: DecreasePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DecreasePosition!]!
  updatePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdatePosition
  updatePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdatePosition_orderBy
    orderDirection: OrderDirection
    where: UpdatePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdatePosition!]!
  referralAdjustment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReferralAdjustment
  referralAdjustments(
    skip: Int = 0
    first: Int = 100
    orderBy: ReferralAdjustment_orderBy
    orderDirection: OrderDirection
    where: ReferralAdjustment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReferralAdjustment!]!
  closePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClosePosition
  closePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: ClosePosition_orderBy
    orderDirection: OrderDirection
    where: ClosePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClosePosition!]!
  liquidatePosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidatePosition
  liquidatePositions(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidatePosition_orderBy
    orderDirection: OrderDirection
    where: LiquidatePosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidatePosition!]!
  trade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trades(
    skip: Int = 0
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    where: Trade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Trade!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

enum TokenAddress {
  _0x82af49447d8a07e3bd95bd0d56f35241523fbab1
  _0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f
  _0xf97f4df75117a78c1a5a0dbb814af92458539fb4
  _0xfa7f8980b0f1e64a2062791cc3b0871572f1f7f0
  _0x4277f8f2c384827b5273592ff7cebd9f2c1ac258
  _0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a
  _0xf42ae1d54fd613c9bb14810b0588faaa09a426ca
  _0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7
  _0x49d5c2bdffac6ce2bfdb6640f4f80f226bc10bab
  _0x50b7545627a5162f82a992c33b87adc75187b218
  _0x152b9d0fdc40c096757f570a51e494bd4b943e50
  _0x01234181085565ed162a948b6a5e88758cd7c7b8
  _0x62edc0692bd897d2295872a9ffcac5425011c661
  _0xff1489227bbaac61a9209a08929e4c2a526ddd17
}

type Trade {
  id: ID!
  timestamp: Int!
  account: String!
  collateralToken: String!
  indexToken: String!
  isLong: Boolean!
  key: String!
  status: Status!
  increaseList(skip: Int = 0, first: Int = 100, orderBy: IncreasePosition_orderBy, orderDirection: OrderDirection, where: IncreasePosition_filter): [IncreasePosition!]!
  decreaseList(skip: Int = 0, first: Int = 100, orderBy: DecreasePosition_orderBy, orderDirection: OrderDirection, where: DecreasePosition_filter): [DecreasePosition!]!
  updateList(skip: Int = 0, first: Int = 100, orderBy: UpdatePosition_orderBy, orderDirection: OrderDirection, where: UpdatePosition_filter): [UpdatePosition!]!
  sizeDelta: BigInt!
  collateralDelta: BigInt!
  fee: BigInt!
  size: BigInt!
  collateral: BigInt!
  averagePrice: BigInt!
  realisedPnl: BigInt!
  realisedPnlPercentage: BigInt
  entryFundingRate: BigInt!
  entryReferralCode: String!
  entryReferrer: String!
  settledTimestamp: Int
  closedPosition: ClosePosition
  liquidatedPosition: LiquidatePosition
}

input Trade_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  indexToken: String
  indexToken_not: String
  indexToken_gt: String
  indexToken_lt: String
  indexToken_gte: String
  indexToken_lte: String
  indexToken_in: [String!]
  indexToken_not_in: [String!]
  indexToken_contains: String
  indexToken_contains_nocase: String
  indexToken_not_contains: String
  indexToken_not_contains_nocase: String
  indexToken_starts_with: String
  indexToken_starts_with_nocase: String
  indexToken_not_starts_with: String
  indexToken_not_starts_with_nocase: String
  indexToken_ends_with: String
  indexToken_ends_with_nocase: String
  indexToken_not_ends_with: String
  indexToken_not_ends_with_nocase: String
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  increaseList: [String!]
  increaseList_not: [String!]
  increaseList_contains: [String!]
  increaseList_contains_nocase: [String!]
  increaseList_not_contains: [String!]
  increaseList_not_contains_nocase: [String!]
  increaseList_: IncreasePosition_filter
  decreaseList: [String!]
  decreaseList_not: [String!]
  decreaseList_contains: [String!]
  decreaseList_contains_nocase: [String!]
  decreaseList_not_contains: [String!]
  decreaseList_not_contains_nocase: [String!]
  decreaseList_: DecreasePosition_filter
  updateList: [String!]
  updateList_not: [String!]
  updateList_contains: [String!]
  updateList_contains_nocase: [String!]
  updateList_not_contains: [String!]
  updateList_not_contains_nocase: [String!]
  updateList_: UpdatePosition_filter
  sizeDelta: BigInt
  sizeDelta_not: BigInt
  sizeDelta_gt: BigInt
  sizeDelta_lt: BigInt
  sizeDelta_gte: BigInt
  sizeDelta_lte: BigInt
  sizeDelta_in: [BigInt!]
  sizeDelta_not_in: [BigInt!]
  collateralDelta: BigInt
  collateralDelta_not: BigInt
  collateralDelta_gt: BigInt
  collateralDelta_lt: BigInt
  collateralDelta_gte: BigInt
  collateralDelta_lte: BigInt
  collateralDelta_in: [BigInt!]
  collateralDelta_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  averagePrice: BigInt
  averagePrice_not: BigInt
  averagePrice_gt: BigInt
  averagePrice_lt: BigInt
  averagePrice_gte: BigInt
  averagePrice_lte: BigInt
  averagePrice_in: [BigInt!]
  averagePrice_not_in: [BigInt!]
  realisedPnl: BigInt
  realisedPnl_not: BigInt
  realisedPnl_gt: BigInt
  realisedPnl_lt: BigInt
  realisedPnl_gte: BigInt
  realisedPnl_lte: BigInt
  realisedPnl_in: [BigInt!]
  realisedPnl_not_in: [BigInt!]
  realisedPnlPercentage: BigInt
  realisedPnlPercentage_not: BigInt
  realisedPnlPercentage_gt: BigInt
  realisedPnlPercentage_lt: BigInt
  realisedPnlPercentage_gte: BigInt
  realisedPnlPercentage_lte: BigInt
  realisedPnlPercentage_in: [BigInt!]
  realisedPnlPercentage_not_in: [BigInt!]
  entryFundingRate: BigInt
  entryFundingRate_not: BigInt
  entryFundingRate_gt: BigInt
  entryFundingRate_lt: BigInt
  entryFundingRate_gte: BigInt
  entryFundingRate_lte: BigInt
  entryFundingRate_in: [BigInt!]
  entryFundingRate_not_in: [BigInt!]
  entryReferralCode: String
  entryReferralCode_not: String
  entryReferralCode_gt: String
  entryReferralCode_lt: String
  entryReferralCode_gte: String
  entryReferralCode_lte: String
  entryReferralCode_in: [String!]
  entryReferralCode_not_in: [String!]
  entryReferralCode_contains: String
  entryReferralCode_contains_nocase: String
  entryReferralCode_not_contains: String
  entryReferralCode_not_contains_nocase: String
  entryReferralCode_starts_with: String
  entryReferralCode_starts_with_nocase: String
  entryReferralCode_not_starts_with: String
  entryReferralCode_not_starts_with_nocase: String
  entryReferralCode_ends_with: String
  entryReferralCode_ends_with_nocase: String
  entryReferralCode_not_ends_with: String
  entryReferralCode_not_ends_with_nocase: String
  entryReferrer: String
  entryReferrer_not: String
  entryReferrer_gt: String
  entryReferrer_lt: String
  entryReferrer_gte: String
  entryReferrer_lte: String
  entryReferrer_in: [String!]
  entryReferrer_not_in: [String!]
  entryReferrer_contains: String
  entryReferrer_contains_nocase: String
  entryReferrer_not_contains: String
  entryReferrer_not_contains_nocase: String
  entryReferrer_starts_with: String
  entryReferrer_starts_with_nocase: String
  entryReferrer_not_starts_with: String
  entryReferrer_not_starts_with_nocase: String
  entryReferrer_ends_with: String
  entryReferrer_ends_with_nocase: String
  entryReferrer_not_ends_with: String
  entryReferrer_not_ends_with_nocase: String
  settledTimestamp: Int
  settledTimestamp_not: Int
  settledTimestamp_gt: Int
  settledTimestamp_lt: Int
  settledTimestamp_gte: Int
  settledTimestamp_lte: Int
  settledTimestamp_in: [Int!]
  settledTimestamp_not_in: [Int!]
  closedPosition: String
  closedPosition_not: String
  closedPosition_gt: String
  closedPosition_lt: String
  closedPosition_gte: String
  closedPosition_lte: String
  closedPosition_in: [String!]
  closedPosition_not_in: [String!]
  closedPosition_contains: String
  closedPosition_contains_nocase: String
  closedPosition_not_contains: String
  closedPosition_not_contains_nocase: String
  closedPosition_starts_with: String
  closedPosition_starts_with_nocase: String
  closedPosition_not_starts_with: String
  closedPosition_not_starts_with_nocase: String
  closedPosition_ends_with: String
  closedPosition_ends_with_nocase: String
  closedPosition_not_ends_with: String
  closedPosition_not_ends_with_nocase: String
  closedPosition_: ClosePosition_filter
  liquidatedPosition: String
  liquidatedPosition_not: String
  liquidatedPosition_gt: String
  liquidatedPosition_lt: String
  liquidatedPosition_gte: String
  liquidatedPosition_lte: String
  liquidatedPosition_in: [String!]
  liquidatedPosition_not_in: [String!]
  liquidatedPosition_contains: String
  liquidatedPosition_contains_nocase: String
  liquidatedPosition_not_contains: String
  liquidatedPosition_not_contains_nocase: String
  liquidatedPosition_starts_with: String
  liquidatedPosition_starts_with_nocase: String
  liquidatedPosition_not_starts_with: String
  liquidatedPosition_not_starts_with_nocase: String
  liquidatedPosition_ends_with: String
  liquidatedPosition_ends_with_nocase: String
  liquidatedPosition_not_ends_with: String
  liquidatedPosition_not_ends_with_nocase: String
  liquidatedPosition_: LiquidatePosition_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Trade_filter]
  or: [Trade_filter]
}

enum Trade_orderBy {
  id
  timestamp
  account
  collateralToken
  indexToken
  isLong
  key
  status
  increaseList
  decreaseList
  updateList
  sizeDelta
  collateralDelta
  fee
  size
  collateral
  averagePrice
  realisedPnl
  realisedPnlPercentage
  entryFundingRate
  entryReferralCode
  entryReferrer
  settledTimestamp
  closedPosition
  closedPosition__id
  closedPosition__timestamp
  closedPosition__key
  closedPosition__size
  closedPosition__collateral
  closedPosition__reserveAmount
  closedPosition__realisedPnl
  closedPosition__averagePrice
  closedPosition__entryFundingRate
  liquidatedPosition
  liquidatedPosition__id
  liquidatedPosition__timestamp
  liquidatedPosition__key
  liquidatedPosition__account
  liquidatedPosition__collateralToken
  liquidatedPosition__indexToken
  liquidatedPosition__isLong
  liquidatedPosition__size
  liquidatedPosition__collateral
  liquidatedPosition__reserveAmount
  liquidatedPosition__realisedPnl
  liquidatedPosition__markPrice
}

type Transfer {
  id: ID!
  token: String!
  from: String!
  to: String!
  amount: BigInt!
  amountUsd: BigInt!
  timestamp: BigInt!
}

input Transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUsd: BigInt
  amountUsd_not: BigInt
  amountUsd_gt: BigInt
  amountUsd_lt: BigInt
  amountUsd_gte: BigInt
  amountUsd_lte: BigInt
  amountUsd_in: [BigInt!]
  amountUsd_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  or: [Transfer_filter]
}

enum Transfer_orderBy {
  id
  token
  from
  to
  amount
  amountUsd
  timestamp
}

type UpdatePosition {
  id: ID!
  timestamp: Int!
  key: String!
  size: BigInt!
  collateral: BigInt!
  reserveAmount: BigInt!
  realisedPnl: BigInt!
  averagePrice: BigInt!
  entryFundingRate: BigInt!
  markPrice: BigInt!
}

input UpdatePosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  reserveAmount: BigInt
  reserveAmount_not: BigInt
  reserveAmount_gt: BigInt
  reserveAmount_lt: BigInt
  reserveAmount_gte: BigInt
  reserveAmount_lte: BigInt
  reserveAmount_in: [BigInt!]
  reserveAmount_not_in: [BigInt!]
  realisedPnl: BigInt
  realisedPnl_not: BigInt
  realisedPnl_gt: BigInt
  realisedPnl_lt: BigInt
  realisedPnl_gte: BigInt
  realisedPnl_lte: BigInt
  realisedPnl_in: [BigInt!]
  realisedPnl_not_in: [BigInt!]
  averagePrice: BigInt
  averagePrice_not: BigInt
  averagePrice_gt: BigInt
  averagePrice_lt: BigInt
  averagePrice_gte: BigInt
  averagePrice_lte: BigInt
  averagePrice_in: [BigInt!]
  averagePrice_not_in: [BigInt!]
  entryFundingRate: BigInt
  entryFundingRate_not: BigInt
  entryFundingRate_gt: BigInt
  entryFundingRate_lt: BigInt
  entryFundingRate_gte: BigInt
  entryFundingRate_lte: BigInt
  entryFundingRate_in: [BigInt!]
  entryFundingRate_not_in: [BigInt!]
  markPrice: BigInt
  markPrice_not: BigInt
  markPrice_gt: BigInt
  markPrice_lt: BigInt
  markPrice_gte: BigInt
  markPrice_lte: BigInt
  markPrice_in: [BigInt!]
  markPrice_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdatePosition_filter]
  or: [UpdatePosition_filter]
}

enum UpdatePosition_orderBy {
  id
  timestamp
  key
  size
  collateral
  reserveAmount
  realisedPnl
  averagePrice
  entryFundingRate
  markPrice
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}